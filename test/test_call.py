#!/usr/bin/env python3


from typing import Any

import pytest
from pysad.utils import hex_to_bytes

from manifold.call import Call


@pytest.mark.parametrize(
    ["function", "input", "expected"],
    [
        (
            "transfer(address,uint256)()",
            ("0x782bf0a89860ba4316e117b6bb111be0ba6a54b9", 206024763),
            "0xA9059CBB000000000000000000000000782BF0A89860BA4316E117B6BB111BE0BA6A54B9000000000000000000000000000000000000000000000000000000000C47B03B",
        ),
        (
            "transferFrom(address,address,uint256)()",
            (
                "0x9dda370f43567b9c757a3f946705567bce482c42",
                "0xfe745999a2a0aad53a8d1685df06549d4bb82a88",
                26396983658903035747447631924,
            ),
            "0x23B872DD0000000000000000000000009DDA370F43567B9C757A3F946705567BCE482C42000000000000000000000000FE745999A2A0AAD53A8D1685DF06549D4BB82A880000000000000000000000000000000000000000554B12B7809A1C8D05807034",
        ),
        (
            "swap(uint256,uint256,address,bytes)()",
            (
                92081849514594474034,
                0,
                "0x290501163c0cc17817e36f5bcd2d25439a326dab",
                b"",
            ),
            "0x022C0D9F000000000000000000000000000000000000000000000004FDE47243526118320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000290501163C0CC17817E36F5BCD2D25439A326DAB00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000",
        ),
        (
            "execute(bytes,bytes[],uint256)()",
            (
                b"\x0b\x00",
                (
                    b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xb0\xa1\x0eG\x00\x00",
                    b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\xb0\xa1\x0eG\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07m\x97\xea\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00+\xc0*\xaa9\xb2#\xfe\x8d\n\x0e\\O'\xea\xd9\x08<ul\xc2\x00\x01\xf4\xa0\xb8i\x91\xc6!\x8b6\xc1\xd1\x9dJ.\x9e\xb0\xce6\x06\xebH\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                ),
                1683229679,
            ),
            "0x
        ),
        (
            "approve(address,uint256)()",
            (
                "0x11a2e73bada26f184e3d508186085c72217dc014",
                2395529426506060966420181708806,
            ),
            "0x095EA7B300000000000000000000000011A2E73BADA26F184E3D508186085C72217DC014000000000000000000000000000000000000001E3C5F7F978A9213D855107006",
        ),
        (
            "uniswapV3SwapCallback(int256,int256,bytes)()",
            (
                -130853293,
                70000000000000000,
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x1cngp<{\xd7\x10~\xed\x83\x03\xfb\xe6\xec%T\xbfk\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00+\xc0*\xaa9\xb2#\xfe\x8d\n\x0e\\O'\xea\xd9\x08<ul\xc2\x00\x01\xf4\xa0\xb8i\x91\xc6!\x8b6\xc1\xd1\x9dJ.\x9e\xb0\xce6\x06\xebH\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            ),
            "0x
        ),
        (
            "swap(address,bool,int256,uint160,bytes)()",
            (
                "0xeef7b7205caf2bcd71437d9acde3874c3388c138",
                False,
                70000000000000000,
                1461446703485210103287273052203988822378723970341,
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xef\x1cngp<{\xd7\x10~\xed\x83\x03\xfb\xe6\xec%T\xbfk\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00+\xc0*\xaa9\xb2#\xfe\x8d\n\x0e\\O'\xea\xd9\x08<ul\xc2\x00\x01\xf4\xa0\xb8i\x91\xc6!\x8b6\xc1\xd1\x9dJ.\x9e\xb0\xce6\x06\xebH\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
            ),
            "0x128ACB08000000000000000000000000EEF7B7205CAF2BCD71437D9ACDE3874C3388C138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F8B0A10E470000000000000000000000000000FFFD8963EFD1FC6A506488495D951D5263988D2500000000000000000000000000000000000000000000000000000000000000A000000000000000000000000000000000000000000000000000000000000000A00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000EF1C6E67703C7BD7107EED8303FBE6EC2554BF6B000000000000000000000000000000000000000000000000000000000000002BC02AAA39B223FE8D0A0E5C4F27EAD9083C756CC20001F4A0B86991C6218B36C1D19D4A2E9EB0CE3606EB48000000000000000000000000000000000000000000",
        ),
        (
            "transferFrom(address,address,uint160,address)()",
            (
                "0xf3b274f5b3cb0e55cabbcdf9b5f975e3d3539862",
                "0x74ac706873c399dfc73a4679b1e1fbf474c306e1",
                1000000000000000000000000000,
                "0xc4ee0aa2d993ca7c9263ecfa26c6f7e13009d2b6",
            ),
            "0x36C78516000000000000000000000000F3B274F5B3CB0E55CABBCDF9B5F975E3D353986200000000000000000000000074AC706873C399DFC73A4679B1E1FBF474C306E10000000000000000000000000000000000000000033B2E3C9FD0803CE8000000000000000000000000000000C4EE0AA2D993CA7C9263ECFA26C6F7E13009D2B6",
        ),
        (
            "min(uint256,uint256)()",
            (0, 99),
            "0x7AE2B5C700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063",
        ),
        (
            "max(uint256,uint256)()",
            (10840064, 2),
            "0x6D5433E60000000000000000000000000000000000000000000000000000000000A568000000000000000000000000000000000000000000000000000000000000000002",
        ),
    ],
)
def test_call_encode(function: str, input: tuple, expected: str):
    call = Call(b"\x00" * 20, function, input, "test")
    assert call.encode() == hex_to_bytes(expected)[4:]


@pytest.mark.parametrize(
    ["signature", "data", "expected"],
    [
        (
            "allowance(address,address)(uint256)",
            "0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC233137B2904CD98EA098D",
            115792089237316195423570985008687907853269984665640489327256821294478475790733,
        ),
        (
            "getReserves()(uint256,uint256,uint256)",
            "0x00000000000000000000000000000000000000000000126722BE46C1D9A69FFE00000000000000000000000000000000000000000000000187557F399FCCE0D000000000000000000000000000000000000000000000000000000000645404DB",
            (86905114847486956445694, 28198584527321096400, 1683227867),
        ),
        (
            "balanceOf(address)(uint256)",
            "0x0000000000000000000000000000000000000000000000000000000000000000",
            0,
        ),
        (
            "getAddress(string)(address)",
            "0x000000000000000000000000D16463EF9B0338CE3D73309028EF1714D220C024",
            "0xd16463ef9b0338ce3d73309028ef1714d220c024",
        ),
        (
            "WETH()(address)",
            "0x000000000000000000000000C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2",
            "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        ),
        (
            "token0()(address)",
            "0x000000000000000000000000C02AAA39B223FE8D0A0E5C4F27EAD9083C756CC2",
            "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
        ),
        (
            "ownerOf(uint256)(address)",
            "0x000000000000000000000000F3C97EACCCE55F3DFB2183D8B03E44E507C2C73B",
            "0xf3c97eaccce55f3dfb2183d8b03e44e507c2c73b",
        ),
        (
            "token1()(address)",
            "0x000000000000000000000000E46091DCE9C67691BCF22768BBEE0BC9E20D4BEB",
            "0xe46091dce9c67691bcf22768bbee0bc9e20d4beb",
        ),
        (
            "latestAnswer()(int256)",
            "0x0000000000000000000000000000000000000000000000000000002B9EE261B0",
            187349230000,
        ),
        (
            "getAddress(bytes32)(address)",
            "0x00000000000000000000000039EA01A0298C315D149A490E34B59DBF2EC7E48F",
            "0x39ea01a0298c315d149a490e34b59dbf2ec7e48f",
        ),
    ],
)
def test_call_decode(signature: str, data: bytes, expected: Any):
    call = Call(b"\x00" * 20, signature, (), "test")
    assert call.decode_output(True, data) == ("test", expected)
